{"version":3,"sources":["components/Wrapper/index.js","components/CharacterCard/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","waggleWrapper","pictures","CharacterCard","src","image","alt","name","onClick","clickCharacter","id","App","state","characters","clickedArray","topScore","score","cardWaggle","message","shuffledArray","shuffleArray","setState","includes","concat","picturesArray","i","length","j","Math","floor","random","this","map","item","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0+EAKeA,G,YAFC,SAAAC,GAAK,OAAI,yBAAKC,UAAkC,SAAtBD,EAAME,cAAyB,eAAiB,WAAYF,EAAMG,YCQ7FC,G,MARO,SAAAJ,GAAK,OACzB,yBAAKC,UAAU,QACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,+BAA+BI,IAAKL,EAAMM,MAAOC,IAAKP,EAAMQ,KAAMC,QAAS,kBAAMT,EAAMU,eAAeV,EAAMW,W,OCkElHC,E,2MAjEdC,MAAQ,CACPC,aACAC,aAAc,GACdC,SAAU,EACVC,MAAO,EACPC,WAAY,QACZC,QAAS,I,EAGVT,eAAiB,SAAAC,GAChB,IAAMS,EAAgB,EAAKC,aAAaP,GACxC,EAAKQ,SAAS,CAAER,WAAYM,IACxB,EAAKP,MAAME,aAAaQ,SAASZ,GACpC,EAAKW,SAAS,CAAEL,MAAO,EAAGF,aAAc,GAAII,QAAS,uDAAwDD,WAAY,SAGzH,EAAKI,SAAS,CACbP,aAAc,EAAKF,MAAME,aAAaS,OAAO,CAACb,IAC9CM,MAAO,EAAKJ,MAAMI,MAAQ,EAC1BC,WAAY,QACZC,QAAS,YAGP,EAAKN,MAAMI,MAAQ,EAAKJ,MAAMG,UACjC,EAAKM,SAAS,CAAEN,SAAU,EAAKH,MAAMI,S,EAGvCI,aAAe,SAACI,GACf,IAAK,IAAIC,EAAID,EAAcE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAClD,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADQ,EAEX,CAACD,EAAcG,GAAIH,EAAcC,IAAvED,EAAcC,GAFmC,KAE/BD,EAAcG,GAFiB,KAInD,OAAOH,G,wEAEE,IAAD,OACR,OACC,yBAAKxB,UAAU,OACd,gCACC,yBAAKA,UAAU,yBACd,6DAIF,wBAAIA,UAAU,wDACb,0LACA,uBAAGA,UAAU,SAAQ,0CAAgB+B,KAAKnB,MAAMI,MAA3B,kBAAiDe,KAAKnB,MAAMG,WACjF,uBAAGf,UAAU,WAAU,gCAAS+B,KAAKnB,MAAMM,WAE5C,kBAAC,EAAD,CACCjB,cAAiB8B,KAAKnB,MAAMK,WAC5Bf,SAAY6B,KAAKnB,MAAMC,WAAWmB,KAAI,SAAAC,GAAI,OACzC,kBAAC,EAAD,CACCC,IAAKD,EAAKvB,GACVA,GAAIuB,EAAKvB,GACTD,eAAgB,EAAKA,eACrBF,KAAM0B,EAAK1B,KACXF,MAAO4B,EAAK5B,kB,GAzDD8B,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8090b101.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper = props => <div className= {props.waggleWrapper===\"true\" ? \"wrapperShake\" : \"wrapper\"}>{props.pictures}</div>;\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./CharacterCard.css\";\r\n\r\nconst CharacterCard = props => (\r\n  <div className=\"card\">\r\n    <div className=\"img-container\">\r\n      <img className=\"img-thumbnail img-responsive\" src={props.image} alt={props.name} onClick={() => props.clickCharacter(props.id)}/>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default CharacterCard;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Wrapper from \"./components/Wrapper\";\nimport CharacterCard from \"./components/CharacterCard\";\nimport characters from \"./characters.json\";\n\nclass App extends Component {\n\tstate = {\n\t\tcharacters,\n\t\tclickedArray: [],\n\t\ttopScore: 0,\n\t\tscore: 0,\n\t\tcardWaggle: \"false\",\n\t\tmessage: \"\"\n\t};\n\n\tclickCharacter = id => {\n\t\tconst shuffledArray = this.shuffleArray(characters);\n\t\tthis.setState({ characters: shuffledArray });\n\t\tif (this.state.clickedArray.includes(id)) {\n\t\t\tthis.setState({ score: 0, clickedArray: [], message: \"Incorrect, Game Over! Click an image to start again!\", cardWaggle: \"true\" });\n\t\t}\n\t\telse {\n\t\t\tthis.setState({\n\t\t\t\tclickedArray: this.state.clickedArray.concat([id]),\n\t\t\t\tscore: this.state.score + 1,\n\t\t\t\tcardWaggle: \"false\",\n\t\t\t\tmessage: \"Correct\"\n\t\t\t});\n\t\t}\n\t\tif (this.state.score > this.state.topScore) {\n\t\t\tthis.setState({ topScore: this.state.score });\n\t\t}\n\t}\n\tshuffleArray = (picturesArray) => {\n\t\tfor (let i = picturesArray.length - 1; i > 0; i--) {\n\t\t\tconst j = Math.floor(Math.random() * (i + 1));\n\t\t\t[picturesArray[i], picturesArray[j]] = [picturesArray[j], picturesArray[i]];\n\t\t}\n\t\treturn picturesArray;\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<header>\n\t\t\t\t\t<div className=\"jumbotron text-center\">\n\t\t\t\t\t\t<h2>GAME OF THRONES MEMORY GAME</h2>\n\t\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t</header>\n\t\t\t\t<h3 className=\"directions text-white text-center col-sm-10 offset-1\">\n\t\t\t\t\t<p>Click on one character to begin. Remember who you click and try to get all 12 characters in a row without repeating a pick. Your high score will be logged.</p>\n\t\t\t\t\t<p className=\"score\"><strong>Score: {this.state.score} | High Score: {this.state.topScore}</strong></p>\n\t\t\t\t\t<p className=\"message\"><strong>{this.state.message}</strong></p>\n\t\t\t\t</h3>\n\t\t\t\t<Wrapper\n\t\t\t\t\twaggleWrapper = {this.state.cardWaggle}\n\t\t\t\t\tpictures = {this.state.characters.map(item => (\n\t\t\t\t\t\t<CharacterCard\n\t\t\t\t\t\t\tkey={item.id}\n\t\t\t\t\t\t\tid={item.id}\n\t\t\t\t\t\t\tclickCharacter={this.clickCharacter}\n\t\t\t\t\t\t\tname={item.name}\n\t\t\t\t\t\t\timage={item.image}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}